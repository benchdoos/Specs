/*
 * (C) Copyright 2018.  Eugene Zrazhevsky and others.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Contributors:
 * Eugene Zrazhevsky <eugene.zrazhevsky@gmail.com>
 */

package com.mmz.specs.application.gui.panels.service;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

public class SimpleImageViewer extends JPanel {
    private static final RESIZE_POLICY DEFAULT_RESIZE_POLICY = RESIZE_POLICY.FIT_TO_SCREEN;
    final private BufferedImage bufferedImage;
    private final int DEFAULT_UNIT_INCREMENT_SPEED = 16;
    private Color BACKGROUND_COLOR = new JPanel().getBackground();
    private RESIZE_POLICY currentResizePolicy = DEFAULT_RESIZE_POLICY;
    private JPanel contentPane;
    private JLabel imageLabel;
    private JScrollPane scrollPane;
    private float currentSize = 1.0f;

    public SimpleImageViewer(BufferedImage image) {
        this.bufferedImage = image;
        initGui();
        initImageContextMenu();

        updateImage(image);

        initComponentListeners(image);

        initMouseListeners();

        centerImage();

        Timer imageTimer = new Timer(1000, new ActionListener() {
            private float localSize = currentSize;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (localSize != currentSize) {
                    localSize = currentSize;
                    scaleImage(currentSize);
                }
            }
        });
        imageTimer.setRepeats(true);
        imageTimer.restart();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane = new JScrollPane();
        contentPane.add(scrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        imageLabel = new JLabel();
        imageLabel.setHorizontalAlignment(0);
        imageLabel.setHorizontalTextPosition(0);
        imageLabel.setText("");
        scrollPane.setViewportView(imageLabel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    /*public BufferedImage getBufferedImage(BufferedImage image, int height, int width) {
        if (height <= 0 && width <= 0) {
            height = image.getHeight(null);
            width = image.getWidth(null);
        }
        Image tmp = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        BufferedImage dimg = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = dimg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();

        return dimg;
    }*/

    private void centerImage() {
        Dimension size = scrollPane.getViewport().getViewSize();

        int x = (size.width - imageLabel.getIcon().getIconWidth()) / 2;
        int y = (size.height - imageLabel.getIcon().getIconHeight()) / 2;

        scrollPane.getViewport().setViewPosition(new Point(x, y));
    }

    private Image fitToHeight(Image image) {
        final int width = image.getWidth(null);
        final int height = image.getHeight(null);
        final int componentHeight = getHeight() - scrollPane.getHorizontalScrollBar().getHeight();
        BufferedImage resizedImage = getBufferedImage(image, componentHeight, ((int) ((double) (width * componentHeight))) / height);
        return new ImageIcon(resizedImage).getImage();
    }

    private Image fitToWidth(Image image) {
        final int width = image.getWidth(null);
        final int height = image.getHeight(null);
        final int componentWidth = getWidth() - scrollPane.getVerticalScrollBar().getWidth();
        BufferedImage resizedImage = getBufferedImage(image, ((int) ((double) (componentWidth * height)) / width), componentWidth);
        return new ImageIcon(resizedImage).getImage();
    }

    private Image fitToWindow(Image image) {
        final int width = image.getWidth(null);
        final int height = image.getHeight(null);
        final int componentHeight = getHeight() - scrollPane.getHorizontalScrollBar().getHeight();
        final int componentWidth = getWidth() - scrollPane.getVerticalScrollBar().getWidth();

        final int heightForFitToWidth = (int) ((double) (componentWidth * height)) / width;
        if (heightForFitToWidth > componentHeight) {
            return fitToHeight(image);
        } else {
            return fitToWidth(image);
        }
    }

    private BufferedImage getBufferedImage(Image image, int height, int width) {
        if (height <= 0 && width <= 0) {
            height = image.getHeight(null);
            width = image.getWidth(null);
        }

        BufferedImage bufferedImage = null;
        if (!Thread.currentThread().isInterrupted()) {
            bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = bufferedImage.createGraphics();
            g2.setBackground(BACKGROUND_COLOR);
            g2.clearRect(0, 0, width, height);
            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
                    RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
            g2.drawImage(image, 0, 0, width, height, null);
            g2.dispose();
        }
        return bufferedImage;

    }

    private float getCorrectSize(float v) {
        float result;
        final float MIN_SCALE = 0.02f;
        final float MAX_SCALE = getMaxScaleValue();
        if (v >= MIN_SCALE && v <= MAX_SCALE) {
            result = v;
        } else {
            if (v <= MIN_SCALE) {
                currentSize = MIN_SCALE;
                result = currentSize;
            } else {
                currentSize = MAX_SCALE;
                result = currentSize;
            }
        }
        return result;
    }

    private float getMaxScaleValue() {
        if (bufferedImage.getWidth() > 1500) {
            return 2.0f;
        } else {
            return 5.0f;
        }
    }

    private void initComponentListeners(BufferedImage image) {
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                updateImage(image);
            }
        });
    }

    private void initGui() {
        setLayout(new GridLayout());
        add(contentPane);
        scrollPane.getVerticalScrollBar().setUnitIncrement(DEFAULT_UNIT_INCREMENT_SPEED);
        scrollPane.getHorizontalScrollBar().setUnitIncrement(DEFAULT_UNIT_INCREMENT_SPEED);
    }

    private void initImageContextMenu() {
        JPopupMenu menu = new JPopupMenu();
        JMenu resizeMenu = new JMenu("Изменить размер");

        JMenuItem screen = new JMenuItem("По размеру окна");
        screen.addActionListener(l -> {
            currentResizePolicy = RESIZE_POLICY.FIT_TO_SCREEN;
            updateImage(bufferedImage);
        });
        resizeMenu.add(screen);

        JMenuItem original = new JMenuItem("Оригинальный размер");
        original.addActionListener(l -> {
            currentResizePolicy = RESIZE_POLICY.ORIGINAL_SIZE;
            updateImage(bufferedImage);
            centerImage();
        });
        resizeMenu.add(original);

        JMenuItem toWidth = new JMenuItem("По ширине");
        toWidth.addActionListener(l -> {
            currentResizePolicy = RESIZE_POLICY.FIT_TO_WIDTH;
            updateImage(bufferedImage);
        });
        resizeMenu.add(toWidth);

        JMenuItem toHeight = new JMenuItem("По высоте");
        toHeight.addActionListener(l -> {
            currentResizePolicy = RESIZE_POLICY.FIT_TO_HEIGHT;
            updateImage(bufferedImage);
        });
        resizeMenu.add(toHeight);

        menu.add(resizeMenu);
        imageLabel.setComponentPopupMenu(menu);

    }

    private void initMouseListeners() {
        imageLabel.setAutoscrolls(true);
        MouseAdapter ma = new MouseAdapter() {
            private Point origin;

            @Override
            public void mouseDragged(MouseEvent e) {
                if (origin != null) {
                    JViewport viewPort = (JViewport) SwingUtilities.getAncestorOfClass(JViewport.class, imageLabel);
                    if (viewPort != null) {
                        int deltaX = origin.x - e.getX();
                        int deltaY = origin.y - e.getY();

                        Rectangle view = viewPort.getViewRect();
                        view.x += deltaX;
                        view.y += deltaY;
                        imageLabel.scrollRectToVisible(view);
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                origin = new Point(e.getPoint());
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }
        };

        imageLabel.addMouseListener(ma);
        imageLabel.addMouseMotionListener(ma);

        scrollPane.addMouseWheelListener(new MouseAdapter() {
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                final boolean controlDown = e.isControlDown();
                if (controlDown) {
                    scrollPane.getVerticalScrollBar().setUnitIncrement(0);
                    scrollPane.getHorizontalScrollBar().setUnitIncrement(0);
                    currentSize = getCorrectSize(currentSize + ((float) e.getWheelRotation() * .05f));
                } else {
                    scrollPane.getVerticalScrollBar().setUnitIncrement(DEFAULT_UNIT_INCREMENT_SPEED);
                    scrollPane.getHorizontalScrollBar().setUnitIncrement(DEFAULT_UNIT_INCREMENT_SPEED);
                }

            }
        });
    }

    private Icon resizeImageByCurrentPolicy(BufferedImage bufferedImage) {
        Image image = new ImageIcon(bufferedImage).getImage();

        switch (currentResizePolicy) {
            case ORIGINAL_SIZE: {
                currentSize = 1.0f;
                break;
            }
            case FIT_TO_WIDTH: {
                image = fitToWidth(image);
                currentSize = getCorrectSize((float) image.getWidth(null) / bufferedImage.getWidth());
                break;
            }
            case FIT_TO_HEIGHT: {
                image = fitToHeight(image);
                currentSize = getCorrectSize((float) image.getWidth(null) / bufferedImage.getWidth());
                break;
            }
            default: {
                image = fitToWindow(image);
                currentSize = getCorrectSize((float) image.getWidth(null) / bufferedImage.getWidth());
                break;
            }
        }
        return new ImageIcon(image);
    }

    private void scaleImage(float size) {
        updateImage(bufferedImage, size);
    }

    private void updateImage(BufferedImage bufferedImage) {
        imageLabel.setIcon(resizeImageByCurrentPolicy(bufferedImage));
    }

    private void updateImage(BufferedImage bufferedImage, float size) {
        int resizedHeight = (int) (bufferedImage.getHeight() * size);
        int resizedWidth = (int) (bufferedImage.getWidth() * size);

        BufferedImage resized;
        resized = getBufferedImage(bufferedImage, resizedHeight, resizedWidth);
        if (resized != null) {
            imageLabel.setIcon(null);
            imageLabel.setIcon(new ImageIcon(resized));
        }
    }

    public enum RESIZE_POLICY {
        ORIGINAL_SIZE, FIT_TO_SCREEN, FIT_TO_WIDTH, FIT_TO_HEIGHT
    }
}
