/*
 * (C) Copyright 2018.  Eugene Zrazhevsky and others.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Contributors:
 * Eugene Zrazhevsky <eugene.zrazhevsky@gmail.com>
 */

package com.mmz.specs.application.gui.panels.service;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.mmz.specs.application.utils.CommonUtils;
import com.mmz.specs.application.utils.Logging;
import com.mmz.specs.model.MaterialEntity;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseListener;

public class MaterialPanel extends JPanel {
    private static final Logger log = LogManager.getLogger(Logging.getCurrentClassName());

    private JPanel contentPane;
    private JLabel materialFirstWordLabel;
    private JLabel materialMarkLabel;
    private JLabel materialProfileLabel;
    private JSeparator materialSeparator;
    private MaterialEntity materialEntity;
    private int maxStringSize = 35; //initial


    public MaterialPanel() {
        initGui();
    }

    @Override
    public synchronized void addMouseListener(MouseListener l) {
        contentPane.addMouseListener(l);
    }

    private void updateInfo() {
        updateText();
        updateToolTip();
    }

    private void updateText() {
        if (materialEntity != null) {
            String firstWord = CommonUtils.getFirstWordText(materialEntity);
            String substringLongProfile = CommonUtils.substring(maxStringSize, CommonUtils.getLongProfile(materialEntity));
            String substringLongMark = CommonUtils.substring(maxStringSize, materialEntity.getLongMark());

            if (!firstWord.isEmpty()) {
                if (!substringLongProfile.isEmpty()) {
                    materialFirstWordLabel.setText(firstWord);
                    materialProfileLabel.setText(substringLongProfile);
                    materialMarkLabel.setText(substringLongMark);
                    materialSeparator.setVisible(true);
                } else {
                    String fixedFirstWord = firstWord.replaceAll(" ", "");
                    if (!fixedFirstWord.isEmpty()) {
                        fixedFirstWord = fixedFirstWord + " ";
                    }
                    materialFirstWordLabel.setText(CommonUtils.substring(maxStringSize, fixedFirstWord + substringLongMark));
                    materialProfileLabel.setText(" ");
                    materialMarkLabel.setText(" ");
                    materialSeparator.setVisible(false);
                }
            } else {
                materialFirstWordLabel.setText(firstWord + substringLongProfile + substringLongMark);
                materialSeparator.setVisible(false);
            }
        } else {
            materialFirstWordLabel.setText("нет данных");
            materialMarkLabel.setText("");
            materialProfileLabel.setText("");
            materialSeparator.setVisible(false);
        }
    }

    private void initGui() {
        setLayout(new GridLayout());
        add(contentPane);
    }

    public MaterialEntity getMaterialEntity() {
        return materialEntity;
    }

    public void setMaterialEntity(MaterialEntity materialEntity) {
        this.materialEntity = materialEntity;
        updateInfo();
    }

    @Override
    public synchronized MouseListener[] getMouseListeners() {
        return contentPane.getMouseListeners();
    }

    @Override
    public synchronized void removeMouseListener(MouseListener l) {
        contentPane.removeMouseListener(l);
    }

    public int getMaxStringSize() {
        return maxStringSize;
    }

    private void updateToolTip() {
        if (materialEntity != null) {
            contentPane.setToolTipText(CommonUtils.getHtmlToolTip(materialEntity));
        } else {
            contentPane.setToolTipText(null);
        }
    }

    public void setMaxStringSize(int maxStringSize) {
        this.maxStringSize = maxStringSize;
        updateInfo();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        materialFirstWordLabel = new JLabel();
        materialFirstWordLabel.setText("нет данных");
        contentPane.add(materialFirstWordLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, -1), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        materialMarkLabel = new JLabel();
        materialMarkLabel.setText(" ");
        materialMarkLabel.setVerticalTextPosition(1);
        panel1.add(materialMarkLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        materialProfileLabel = new JLabel();
        materialProfileLabel.setText(" ");
        materialProfileLabel.setVerticalTextPosition(3);
        panel1.add(materialProfileLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        materialSeparator = new JSeparator();
        panel1.add(materialSeparator, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}